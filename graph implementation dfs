You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.

 

Example 1:

Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
Example 2:

Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]


Pinned by Naresh Gupta
Time Complexity - O(Q * (V + E)), where Q - Quereis, V - Number of Vertices, E - Number Edges (length of values).
Space Complexity - O(V + E).

class Solution {
    class Node{//nodes for routes in taking to reach final destination
        String dest;
        double value;//value to reach particular destination
        Node(String s, double v)
        {
            dest=s;
            value=v;
        }
        
    }
    
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        int n = equations.size();
        int m = values.length;
        int l = queries.size();
        
        HashMap<String, ArrayList<Node>> hm= new HashMap<String, ArrayList<Node>>();//src vs (dest node, value)
        
        
        for(int i=0;i<n;i++)
        {
            String src = equations.get(i).get(0);//srource s
            String dest = equations.get(i).get(1);//destinations
            
            hm.putIfAbsent(src, new ArrayList<Node>());
            hm.putIfAbsent(dest, new ArrayList<Node>());
            hm.get(src).add(new Node(dest, values[i]));
            hm.get(dest).add(new Node(src, 1/values[i]));
            
        }
           //graph created
        
        double[] ans=new double[l];
        for(int i=0;i<l;i++)
        {
            String src = queries.get(i).get(0); //queries to iterate from src
            String dest = queries.get(i).get(1);//to final destination
            
            ans[i] = dfs(hm, src, dest, new HashSet<>());//dfs over each query to go from src to final destination and set to keep track of visited nodes for each query
        }
        return ans;
    }
    public double dfs(HashMap<String, ArrayList<Node>> hm , String src,String dest,HashSet<String> st )
    {
        double ans=0.0;
        
        if(!(hm.containsKey(src) && hm.containsKey(dest)))//if either src or dest is not present in graph then not possible to reach -1
            return -1.0;
        if(src.equals(dest))//reached final destination return ans * 1
            return 1.0;
        
        st.add(src);//mark visited
        
        ArrayList<Node> possibleDestinations= hm.get(src);//possible route from src to destinations
        if(possibleDestinations != null)
        {
            int size = possibleDestinations.size();
            for(int i=0;i<size;i++)
            {
                if(!st.contains(possibleDestinations.get(i).dest))
                {
                    ans = dfs(hm, possibleDestinations.get(i).dest , dest, st);
                    if(ans != -1.0)// if got a route from src to final destination
                        return ans * possibleDestinations.get(i).value; // return ans 
                }
            }
        }
        
        return -1;//else return not possible
    }
    
    
    
}
